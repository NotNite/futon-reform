---
import '@fontsource/atkinson-hyperlegible/400.css';
import '@fontsource/atkinson-hyperlegible/400-italic.css';
import '@fontsource/atkinson-hyperlegible/700.css';
import '@fontsource/atkinson-hyperlegible/700-italic.css';

import '@fontsource/zilla-slab/400.css';
import '@fontsource/zilla-slab/700.css';
import '@fontsource/zilla-slab/400-italic.css';
import '@fontsource/zilla-slab/700-italic.css';

import '@fontsource/ibm-plex-mono/400.css';
import '@fontsource/ibm-plex-mono/700.css';
import '@fontsource/ibm-plex-mono/400-italic.css';
import '@fontsource/ibm-plex-mono/700-italic.css';

import "../styles/layout.scss";

import { ThemeLoader, ThemeSelect, ThemeStyling } from "nottheme";
import { ClientRouter } from "astro:transitions";

import Sidebar from "../components/Sidebar.astro";
import Stick from "../components/Stick.astro";

import settings from "../theme";

interface Props {
	title: string;
	path?: string;

	description?: string;
	cover?: string;

	largeTitle?: boolean;
	hideTitle?: boolean;
	hideStick?: boolean;
	hideDescription?: boolean;
}
const {
	title,
	path,

	description,
	cover,

	largeTitle,
	hideTitle,
	hideDescription,
	hideStick
} = Astro.props;

let largeTitleVar, hideTitleVar, hideDescVar;
if (largeTitle) {largeTitleVar = '5.5rem';} else {largeTitleVar = '3rem';}
if (hideTitle) {hideTitleVar = "none";} else {hideTitleVar = 'visible';}
if (hideDescription) {hideDescVar = "none";} else {hideDescVar = 'visible';}

const descPosX = (title.length / 2.1).toString() + 'rem';
---
<!doctype HTML>
<html lang="en">
	<head>
		<meta charset="utf-8" />
		<meta name="viewport" content="width=device-width,initial-scale=1, maximum-scale=1.8"/>
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
		<meta property="og:image" content="/favicon.png" />
		<meta content="#766481" data-react-helmet="true" name="theme-color" />
		<meta name="title" content={title} />
		<meta name="description" content={description} />
		<link rel="icon" type="image/png" href="/favicon.png" />
		<ClientRouter/>
		<ThemeStyling settings={settings} />
	</head>

	<body class="nottheme">
		<ThemeLoader settings={settings} />
		<div id="outer-container">
			<div id="sidebar">
				<Sidebar>
					<ThemeSelect settings={settings} />
				</Sidebar>
			</div>
			<div id="main-container">
				<div id="spacer" style="min-width: 40.2rem; height: 0; position: relative;">&nbsp;</div>
				<div id="doc">
					<div id="title-desc">
						<h1 class="title">{title}</h1>
						<span class="description">{description}</span></div>
					<slot />
				</div>
				
			</div>
		</div>
		<Stick hide={hideStick}/>
		<script>
			// uncheck ALL boxes on page load (meant for the sidebar)
			let allCheckboxes = document.querySelectorAll('input[type=checkbox]');
			[].forEach.call(allCheckboxes, function (checkbox) {
				checkbox.checked = checkbox.defaultChecked;
			});

			// get viewport width for reactive stick opacity
			let r = document.querySelector(':root');
			function logWidth() {
				let width = window.innerWidth;
				let opacity = getComputedStyle(document.body).opacity;
				r.style.setProperty('--vp-width', width);
				console.log(width, opacity)
			}
			window.addEventListener('resize', logWidth);
			logWidth();
		</script>
	</body>
</html>

<style define:vars={{hideTitleVar, hideDescVar, largeTitleVar, descPosX}}>
	#title-desc {
		display: flex;
		flex-direction: column;
	}
	h1.title {
		font-size: var(--largeTitleVar);
		display: var(--hideTitleVar);
		hyphens: none;
		word-break: keep-all;
	}
	.description {
		font-size: 1.2rem;
		display: var(--hideDescVar);
		color: #eee;
		position: relative;
		top: -1.1rem;
		left: var(--descPosX);
		font-style: italic;
		filter:
			drop-shadow(1px 0px 0px #1e1d21)
			drop-shadow(0px 1px 0px #1e1d21)
			drop-shadow(-1px 0px 0px #1e1d21)
			drop-shadow(0px -1px 0px #1e1d21);
	}
</style>

<style is:global>
	#doc p, #doc h1, #doc h2, #doc h3, #doc h4, #doc h5, #doc h6, 
	#doc em, #doc strong, #doc span {
		font-family: var(--font), sans-serif;
		line-height: var(--space);
		letter-spacing: var(--tween);
	}
</style>

<style is:global>
	@keyframes bump {
		0% {
			opacity: 0;
			transform: scale(1) translateX(200px);
		}
		50% {
			opacity: 0.5;
			transform: scale(1.1);
		}
		100% {
			opacity: 1;
			transform: scale(1) translateX(0);
		}
	}
</style>